name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  release-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Generate PR token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.UNBKBOT_APPID }}
          private-key: ${{ secrets.UNBKBOT_KEY }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Release PR or Release
        id: release_please
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ steps.generate_token.outputs.token }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json

      - name: Setup Node.js
        if: steps.release_please.outputs.release_created
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install
        if: steps.release_please.outputs.release_created
        run: npm ci

      - name: Build
        if: steps.release_please.outputs.release_created
        run: npm run build

      - name: Upload Release Artifacts
        if: steps.release_please.outputs.release_created
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: gh release upload ${{ steps.release_please.outputs.tag_name }} ./dist/*.js

      - name: Add autorelease published label to PR
        if: ${{ steps.release_please.outputs.release_created && steps.release_please.outputs.pr }}
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          gh pr edit ${{ steps.release_please.outputs.pr }} --add-label "autorelease: published"

      - name: Delete release-please branch
        if: ${{ steps.release_please.outputs.release_created && steps.release_please.outputs.pr }}
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          # Get the branch name from the PR
          PR_BRANCH=$(gh pr view ${{ steps.release_please.outputs.pr }} --json headRefName --jq '.headRefName')
          echo "Deleting branch: $PR_BRANCH"
          git push origin --delete "$PR_BRANCH" || echo "Branch '$PR_BRANCH' doesn't exist"
